package com.hmrocket.magicpoker;

import android.content.Context;

import com.google.android.gms.analytics.GoogleAnalytics;
import com.google.android.gms.analytics.HitBuilders;
import com.google.android.gms.analytics.Logger;
import com.google.android.gms.analytics.Tracker;
import com.hmrocket.poker.RoundPhase;

import java.util.HashMap;
import java.util.Map;

// @formatter:off
/**
 *
 * <p>
 * A collection of Google Analytics trackers. Fetch the tracker you need using
 * {@code AnalyticsTrackers.getInstance().get(...)}.
 * This code was generated by Android Studio but can be safely modified by
 * hand at this point.
 * <p/>
 *
 * Tracked Events:
 * 	<ul>
 * 		<li>Skip</li>
 * 		<li>Start</li>
 * 		<li>Level-up</li>
 * 		<li>Sound-pref</li>
 * 		<li>Music-pre</li>
 * 		<li></li>
 * <ul/>
 *
 */
// @formatter:on
public final class AnalyticsTrackers {

	//Constant values
	private static final String CATEGORY_GAME_PLAY = "GamePlay";
	private static final String CATEGORY_COMPLETIONS = "Completions";
	private static final String CATEGORY_PREFERENCE = "Preference";
	private static final String ON = "ON";
	private static final String OFF = "OFF";
	private static AnalyticsTrackers sInstance;
	private final Map<Target, Tracker> mTrackers = new HashMap<>();
	private final Context mContext;

	/**
	 * Don't instantiate directly - use {@link #getInstance()} instead.
	 */
	private AnalyticsTrackers(Context context) {
		mContext = context.getApplicationContext();
	}

	public static synchronized void initialize(Context context) {
		if (sInstance != null) {
			throw new IllegalStateException("Extra call to initialize analytics trackers");
		}

		sInstance = new AnalyticsTrackers(context);
	}

	public static synchronized AnalyticsTrackers getInstance() {
		if (sInstance == null) {
			throw new IllegalStateException("Call initialize() before getInstance()");
		}

		return sInstance;
	}

	/**
	 * @return Google Analytic tracker for the target App
	 */
	public static synchronized Tracker getAppTracker() {
		return getInstance().get(AnalyticsTrackers.Target.APP);
	}

	/**
	 * Track user pressing skip button.
	 *
	 * @param roundPhase Represent at which Round user pressed skip button
	 */
	public static void skipEvent(RoundPhase roundPhase) {
		getAppTracker().send(new HitBuilders.EventBuilder()
				.setCategory(CATEGORY_GAME_PLAY)
				.setAction("Skip")
				.setLabel(roundPhase.name())
				.setValue(1)
				.build());
	}

	/**
	 * Track user pressing start button.
	 */
	public static void startEvent() {
		getAppTracker().send(new HitBuilders.EventBuilder()
				.setCategory(CATEGORY_GAME_PLAY)
				.setAction("Start")
				.setValue(1)
				.build());
	}

	/**
	 * Track user level progress.
	 *
	 * @param level User level (bot levels and difficulty between 1 to 100)
	 */
	public static void levelUpEvent(int level) {
		getAppTracker().send(new HitBuilders.EventBuilder()
				.setCategory(CATEGORY_COMPLETIONS)
				.setAction("Level-up")
				.setLabel(Integer.toString(level))
				.setValue(1)
				.build());
	}

	/**
	 * Track user sound effect preference.
	 *
	 * @param on true if the user set sound effect preference to ON, false if muted.
	 */
	public static void soundPreferenceEvent(boolean on) {
		getAppTracker().send(new HitBuilders.EventBuilder()
				.setCategory(CATEGORY_PREFERENCE)
				.setAction("Sound")
				.setLabel(on ? ON : OFF)
				.setValue(1)
				.build());
	}

	/**
	 * Track user music preference.
	 *
	 * @param on true if the user set music preference to ON, false if muted.
	 */
	public static void musicPreferenceEvent(boolean on) {
		getAppTracker().send(new HitBuilders.EventBuilder()
				.setCategory(CATEGORY_PREFERENCE)
				.setAction("Music")
				.setLabel(on ? ON : OFF)
				.setValue(1)
				.build());
	}

	// XXX It seems your just collecting your data for the sake of it.

	public static void setSessionLevel(int level) {
		Tracker appTracker = getAppTracker();
		appTracker.set("1", Integer.toString(level));
	}

	// XXX It seems your just collecting your data for the sake of it.

	/**
	 * Tracker getter
	 *
	 * @param target define the tracking target
	 * @return Google Analytic tracker for specific target
	 */
	public synchronized Tracker get(Target target) {
		if (!mTrackers.containsKey(target)) {
			Tracker tracker;
			switch (target) {
				case APP:
					tracker = GoogleAnalytics.getInstance(mContext).newTracker(R.xml.app_tracker);
					tracker.enableAdvertisingIdCollection(true);
					// TODO verify that auto activity is working (the ligne below should solved in case is not)
					// tracker.enableAutoActivityTracking(true);
					// TODO remove false after you make sure everything is working on GA server side
					if (MyApp.isDebugMode(mContext) && false) {
						// activate Debug features (dry run and verbose logger)
						GoogleAnalytics.getInstance(mContext).setDryRun(true);
						GoogleAnalytics.getInstance(mContext).getLogger().setLogLevel(Logger.LogLevel.VERBOSE);
					}
					break;
				default:
					throw new IllegalArgumentException("Unhandled analytics target " + target);
			}
			mTrackers.put(target, tracker);
		}

		return mTrackers.get(target);
	}


	public enum Target {
		APP,
		// Add more trackers here if you need, and update the code in #get(Target) below
	}

}
